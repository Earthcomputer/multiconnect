
import net.fabricmc.loader.minecraft.McVersion
// Once fabric loader updates:
// import net.fabricmc.loader.impl.game.minecraft.McVersion
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id 'signing'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	api
	tools
}

compileApiJava.dependsOn processApiResources // wtf gradle

def normalizedVersion = new McVersion.Builder().setNameAndRelease(project.minecraft_version).build().normalized

processResources {
	duplicatesStrategy = DuplicatesStrategy.WARN
	inputs.property "version", project.version
	inputs.property "mcversion", normalizedVersion

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version,
				"mcversion": normalizedVersion
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "javadoc"

}

task apiJar(type: Jar, dependsOn: apiClasses) {
	archiveClassifier = 'api-dev'
	from (sourceSets.api.output) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	from (sourceSets.api.output) {
		exclude "fabric.mod.json"
	}
	from 'LICENSE'
}

task apiSourcesJar(type: Jar, dependsOn: apiClasses) {
	archiveClassifier = 'api-sources'
	from sourceSets.api.allSource
}

task apiJavadoc(type: Javadoc) {
	classpath = sourceSets.main.compileClasspath
	source = sourceSets.api.allJava
}

task apiJavadocJar(type: Jar) {
	archiveClassifier = 'api-javadoc'
	from apiJavadoc
}

task remapApiJar(type: RemapJarTask, dependsOn: project.apiJar) {
	input = apiJar.archiveFile
	classifier = 'api'
	addNestedDependencies = false
}

task remapSlimJar(type: RemapJarTask, dependsOn: jar) {
	input = jar.archiveFile
	classifier = 'slim'
	addNestedDependencies = false
}

remapJar.dependsOn remapApiJar

jar {
	from "LICENSE"
}

minecraft {
	accessWidener 'src/main/resources/multiconnect.accesswidener'
}

repositories {
	maven {
		url 'https://jitpack.io/'
	}
	flatDir {
		dirs file(remapApiJar.archivePath).parentFile
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompileOnly "com.github.Earthcomputer:fabric-loader:${project.loader_version}"
	modRuntime "com.github.Earthcomputer:fabric-loader:${project.loader_version}"
	testImplementation "com.github.Earthcomputer:fabric-loader:${project.loader_version}"
	sourceSets.api.compileClasspath += files({sourceSets.main.compileClasspath.toList()})

	if (true) {
		modCompileOnly("net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}") {
			transitive = false // to stop it using its own fabric-loader
		}
		modRuntime("net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}") {
			transitive = false // to stop it using its own fabric-loader
		}
		include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}"
	} else {
		modCompileOnly("net.fabricmc.fabric-api:fabric-api:0.20.2+build.402-1.16") {
			exclude group: 'net.fabricmc', module: 'fabric-loader'
		}
		modRuntime("net.fabricmc.fabric-api:fabric-api:0.20.2+build.402-1.16") {
			exclude group: 'net.fabricmc', module: 'fabric-loader'
		}
	}

	implementation sourceSets.api.output
	include name: file(remapApiJar.archivePath).name.with { it.endsWith('.jar') ? it.substring(0, it.length() - 4) : it }

	sourceSets.test.compileClasspath += files({sourceSets.main.compileClasspath.toList()})
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
	testRuntimeOnly 'com.github.Earthcomputer.junit5:junit-jupiter-engine:8785ac4d'
	testImplementation 'org.mockito:mockito-all:1.10.19'

	sourceSets.tools.compileClasspath += files({sourceSets.main.compileClasspath.toList()})
	sourceSets.tools.runtimeClasspath += files({sourceSets.main.runtimeClasspath.toList()})
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
	systemProperty 'org.junit.TestClassResolver', 'net.earthcomputer.multiconnect.TestingExtension'
	workingDir 'run'
}

def isBeta = version.contains 'pre'
def changes = file('changelog.txt')
changes = changes.exists() ? changes.getText('UTF-8') : ''

// configure the maven publication
publishing {
	repositories {
		maven {
			name = 'nexus'
			url = isBeta ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/' : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
			credentials {
				username(project.hasProperty('ossrhUser') ? ossrhUser : 'foo')
				password(project.hasProperty('ossrhPass') ? ossrhPass : 'bar')
			}
		}
		// mavenLocal()
	}

	publications {
		def configurePom = {
			packaging 'jar'
			inceptionYear = '2019'
			licenses {
				license {
					name = 'MIT'
					url = 'https://github.com/Earthcomputer/multiconnect/blob/master/LICENSE'
				}
			}
			url = 'https://github.com/Earthcomputer/multiconnect'
			issueManagement {
				url = 'https://github.com/Earthcomputer/multiconnect/issues'
			}
			scm {
				connection = 'scm:git:https://github.com/Earthcomputer/multiconnect'
				developerConnection = 'scm:git:https://github.com/Earthcomputer/multiconnect'
				url = 'https://github.com/Earthcomputer/multiconnect'
			}
			developers {
				developer {
					name = 'Joseph Burton'
					id = 'Earthcomputer'
					email = 'burtonjae@hotmail.co.uk'
					roles = ['Main Developer']
				}
			}
		}

		mod(MavenPublication) {
			artifactId 'multiconnect'
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
			}
			artifact(javadocJar) {
				builtBy javadocJar
			}
			pom configurePom
			pom.name = 'multiconnect'
			pom.description = 'The full multiconnect mod JAR'
		}
		api(MavenPublication) {
			artifactId 'multiconnect-api'
			artifact(remapApiJar) {
				builtBy remapApiJar
				classifier = ''
			}
			artifact(apiSourcesJar) {
				builtBy apiSourcesJar
				classifier = 'sources'
			}
			artifact(apiJavadocJar) {
				builtBy apiJavadocJar
				classifier = 'javadoc'
			}
			pom configurePom
			pom.name = 'multiconnect-api'
			pom.description = 'The multiconnect API'
		}
		slim(MavenPublication) {
			artifactId 'multiconnect-slim'
			artifact(remapSlimJar) {
				builtBy remapSlimJar
				classifier = ''
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
				classifier = 'sources'
			}
			artifact(javadocJar) {
				builtBy javadocJar
				classifier = 'javadoc'
			}
			pom configurePom
			pom.name = 'multiconnect-slim'
			pom.description = 'The multiconnect mod JAR without the API'
		}
	}
}

signing {
	sign publishing.publications.mod
	sign publishing.publications.api
	sign publishing.publications.slim
}

curseforge {
	project {
		apiKey = project.hasProperty('curseForgeKey') ? curseForgeKey : 'baz'
		id = '336018'
		changelog = changes
		releaseType = isBeta ? 'beta' : 'release'
		addGameVersion project.minecraft_version
		addGameVersion 'Fabric'
		mainArtifact remapJar.archivePath
		afterEvaluate {
			uploadTask.dependsOn remapJar
		}
	}

	options {
		forgeGradleIntegration = false
	}

}

githubRelease {
	token(project.hasProperty('githubKey') ? githubKey.toString() : 'derp')
	owner 'Earthcomputer'
	repo 'multiconnect'
	tagName("v$version")
	releaseName("Version $version for Minecraft ${project.minecraft_version}")
	body changes
	prerelease isBeta
	releaseAssets remapJar.archivePath
}
tasks.getByName('githubRelease').dependsOn remapJar

task releaseAll {
	group = 'publishing'
	dependsOn publish
	dependsOn tasks.getByName('curseforge')
	dependsOn tasks.getByName('githubRelease')
}

apply from: 'setupRealMcAccount.gradle'

/**
 * To use your real account in the IDE, do the following:
 * - Duplicate the Minecraft Client run configuration in your IDE.
 * - Configure it to run the setupRealMcAccount gradle task after build but before run.
 */

buildscript {
    repositories {
        ivy {
            url 'https://download.nodecdn.net/containers/'
            patternLayout {
                artifact '/[organisation]/[module].[ext]'
            }
            metadataSources { artifact() }
        }
    }
    dependencies {
        classpath 'atl:ATLauncher@jar'
    }
}

import com.atlauncher.App
import com.atlauncher.Launcher
import com.atlauncher.data.MojangAccount
import com.atlauncher.gui.dialogs.LoginWithMicrosoftDialog
import com.atlauncher.managers.AccountManager

import javax.swing.JLabel
import javax.swing.JOptionPane
import javax.swing.JPanel
import javax.swing.JPasswordField
import javax.swing.JTextField
import java.awt.GridLayout

task setupRealMcAccount {
    group = 'ide'
    doLast {
        App.workingDir = file('.gradle/loom-cache/atlauncher').toPath()
        file('.gradle/loom-cache/atlauncher/configs').mkdirs()
        App.launcher = new Launcher() {
            @Override
            void refreshFeaturedPacksPanel() {
            }
            @Override
            void refreshPacksPanel() {
            }
            @Override
            void reloadInstancesPanel() {
            }
            @Override
            void reloadServersPanel() {
            }
        }
        def method = App.getDeclaredMethod('loadSettings')
        method.setAccessible(true)
        method.invoke(null)
        AccountManager.loadAccounts()
        def selectedAccount = AccountManager.getSelectedAccount() ?: (AccountManager.getAccounts().isEmpty() ? null : AccountManager.getAccounts()[0])
        if (selectedAccount == null) {
            def chosen = JOptionPane.showOptionDialog(null, "Select account type", "Setup real mc account", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, ['Microsoft', 'Mojang'] as Object[], 'Microsoft')
            if (chosen == 0) {
                // Microsoft account
                def dialog = new LoginWithMicrosoftDialog()
                while (dialog.isVisible()) {
                    Thread.sleep(500)
                }
                if (AccountManager.getAccounts().isEmpty()) {
                    return
                }
                selectedAccount = AccountManager.getAccounts()[0]
            } else if (chosen == 1) {
                // Mojang account
                def dialog = new JPanel()
                dialog.setLayout(new GridLayout(2, 2))
                dialog.add(new JLabel("Username/Email"))
                def usernameField = new JTextField()
                dialog.add(usernameField)
                dialog.add(new JLabel("Password"))
                def passwordField = new JPasswordField()
                dialog.add(passwordField)
                JOptionPane.showMessageDialog(null, dialog, "Enter Mojang account credentials", JOptionPane.QUESTION_MESSAGE)
                def clientToken = UUID.randomUUID().toString().replace('-', '')
                def resp = com.atlauncher.utils.Authentication.checkAccount(usernameField.getText(), new String(passwordField.getPassword()), clientToken)
                if (resp == null || !resp.hasAuth() || !resp.isValidAuth()) {
                    return
                }
                selectedAccount = new MojangAccount(usernameField.getText(), new String(passwordField.getPassword()), resp, true, clientToken)
                AccountManager.addAccount(selectedAccount)
            } else {
                return
            }
        }

        if (selectedAccount instanceof MojangAccount) {
            selectedAccount.login()
        } else {
            selectedAccount.ensureAccessTokenValid()
        }

        def categories = [:]
        def category
        minecraft.devLauncherConfig.eachLine { line ->
            if (!line.empty && Character.isWhitespace(line.charAt(0))) {
                category << line.trim()
            } else {
                category = []
                categories[line] = category
            }
        }
        def clientArgs = categories['clientArgs']

        for (def i = 0; i < clientArgs.size(); i += 2) {
            if (clientArgs[i] == '--accessToken' || clientArgs[i] == '--uuid' || clientArgs[i] == '--username' || clientArgs[i] == '--userType' || clientArgs[i] == '--userProperties') {
                clientArgs.remove(i)
                clientArgs.remove(i)
                i -= 2
            }
        }

        clientArgs << '--accessToken'
        clientArgs << selectedAccount.getAccessToken()
        clientArgs << '--uuid'
        clientArgs << selectedAccount.getRealUUID().toString().replace('-', '')
        clientArgs << '--username'
        clientArgs << selectedAccount.minecraftUsername
        clientArgs << '--userType'
        clientArgs << selectedAccount.type
//        clientArgs << '--userProperties'
//        clientArgs << userProperties

        def pw = minecraft.devLauncherConfig.newPrintWriter()
        for (def ctgy : categories.keySet()) {
            pw.println ctgy
            for (def val : categories[ctgy]) {
                pw.println('\t' + val)
            }
        }
        pw.flush()
    }
}
